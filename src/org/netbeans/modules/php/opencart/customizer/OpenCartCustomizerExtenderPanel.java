package org.netbeans.modules.php.opencart.customizer;

import java.awt.Component;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.ChangeSupport;

public class OpenCartCustomizerExtenderPanel extends JPanel {

    private static final long serialVersionUID = -290290625888827119L;

    private final ChangeSupport changeSupport = new ChangeSupport(this);

    /**
     * Creates new form OpenCartCustomizerExtenderPanel
     */
    public OpenCartCustomizerExtenderPanel() {
        initComponents();
        init();
    }

    private void init() {
        DefaultDocumentListener defaultDocumentListener = new DefaultDocumentListener();
        addDocumentListener(defaultDocumentListener);
    }

    private void addDocumentListener(DocumentListener listener) {
        catalogTextField.getDocument().addDocumentListener(listener);
        adminTextField.getDocument().addDocumentListener(listener);
        systemTextField.getDocument().addDocumentListener(listener);
        themesTextField.getDocument().addDocumentListener(listener);
    }

    public boolean isPluginEnabled() {
        return enabledCheckBox.isSelected();
    }

    public void setPluginEnabled(boolean isEnabled) {
        enabledCheckBox.setSelected(isEnabled);
    }

    public boolean isOpenCartCodeFormat() {
        return openCartCodeFormatCheckBox.isSelected();
    }

    public void setOpenCartCodeFormat(boolean isEnabled) {
        openCartCodeFormatCheckBox.setSelected(isEnabled);
    }

    public boolean isAutoCreateFile() {
        return autoCreateFileCheckBox.isSelected();
    }

    public void setAutoCreateFile(boolean isEnabled) {
        autoCreateFileCheckBox.setSelected(isEnabled);
    }

    public boolean isCacheDirIgnored() {
        return ignoreCacheCheckBox.isSelected();
    }

    public void setCacheDirIgnored(boolean isEnabled) {
        ignoreCacheCheckBox.setSelected(isEnabled);
    }

    public String getCatalogDirectory() {
        return catalogTextField.getText().trim();
    }

    public void setCatalogDirectory(String path) {
        catalogTextField.setText(path);
    }

    public String getAdminDirectory() {
        return adminTextField.getText().trim();
    }

    public void setAdminDirectory(String path) {
        adminTextField.setText(path);
    }

    public String getSystemDirectory() {
        return systemTextField.getText().trim();
    }

    public void setSystemDirectory(String path) {
        systemTextField.setText(path);
    }

    public String getThemesDirectory() {
        return themesTextField.getText().trim();
    }

    public void setThemesDirectory(String path) {
        themesTextField.setText(path);
    }

    public void addChangeListener(ChangeListener cl) {
        changeSupport.addChangeListener(cl);
    }

    public void removeChangeListener(ChangeListener cl) {
        changeSupport.removeChangeListener(cl);
    }

    public void fireChange() {
        changeSupport.fireChange();
    }

    public void setComponentsEnabled(boolean isEnabled) {
        Component[] components = this.getComponents();
        for (Component component : components) {
            if (component == enabledCheckBox) {
                continue;
            }
            component.setEnabled(isEnabled);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enabledCheckBox = new javax.swing.JCheckBox();
        catalogTextField = new javax.swing.JTextField();
        adminsLabel = new javax.swing.JLabel();
        adminTextField = new javax.swing.JTextField();
        systemLabel = new javax.swing.JLabel();
        systemTextField = new javax.swing.JTextField();
        catalogLabel = new javax.swing.JLabel();
        themesTextField = new javax.swing.JTextField();
        themeLabel = new javax.swing.JLabel();
        ignoreCacheCheckBox = new javax.swing.JCheckBox();
        customPathLabel = new javax.swing.JLabel();
        openCartCodeFormatCheckBox = new javax.swing.JCheckBox();
        autoCreateFileCheckBox = new javax.swing.JCheckBox();

        setToolTipText(org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(enabledCheckBox, org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.enabledCheckBox.text")); // NOI18N
        enabledCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enabledCheckBoxActionPerformed(evt);
            }
        });

        catalogTextField.setText(org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.catalogTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(adminsLabel, org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.adminsLabel.text")); // NOI18N

        adminTextField.setText(org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.adminTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(systemLabel, org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.systemLabel.text")); // NOI18N

        systemTextField.setText(org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.systemTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(catalogLabel, org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.catalogLabel.text")); // NOI18N
        catalogLabel.setAlignmentY(0.0F);
        catalogLabel.setAutoscrolls(true);

        themesTextField.setText(org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.themesTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(themeLabel, org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.themeLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(ignoreCacheCheckBox, org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.ignoreCacheCheckBox.text")); // NOI18N
        ignoreCacheCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreCacheCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(customPathLabel, org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.customPathLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(openCartCodeFormatCheckBox, org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.openCartCodeFormatCheckBox.text")); // NOI18N
        openCartCodeFormatCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCartCodeFormatCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(autoCreateFileCheckBox, org.openide.util.NbBundle.getMessage(OpenCartCustomizerExtenderPanel.class, "OpenCartCustomizerExtenderPanel.autoCreateFileCheckBox.text")); // NOI18N
        autoCreateFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCreateFileCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(enabledCheckBox)
                                .addGap(0, 523, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(adminsLabel)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(themeLabel)
                                        .addComponent(systemLabel))
                                    .addComponent(catalogLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(systemTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(themesTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(catalogTextField)
                                    .addComponent(adminTextField))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(customPathLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ignoreCacheCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openCartCodeFormatCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(autoCreateFileCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(enabledCheckBox)
                .addGap(13, 13, 13)
                .addComponent(customPathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(catalogTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(catalogLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adminsLabel)
                    .addComponent(adminTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(systemLabel)
                    .addComponent(systemTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(themesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(themeLabel))
                .addGap(18, 18, 18)
                .addComponent(ignoreCacheCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openCartCodeFormatCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoCreateFileCheckBox)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void enabledCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enabledCheckBoxActionPerformed
        setComponentsEnabled(enabledCheckBox.isSelected());
        changeSupport.fireChange();
    }//GEN-LAST:event_enabledCheckBoxActionPerformed

    private void ignoreCacheCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoreCacheCheckBoxActionPerformed
        changeSupport.fireChange();
    }//GEN-LAST:event_ignoreCacheCheckBoxActionPerformed

    private void openCartCodeFormatCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCartCodeFormatCheckBoxActionPerformed
        changeSupport.fireChange();
    }//GEN-LAST:event_openCartCodeFormatCheckBoxActionPerformed

    private void autoCreateFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoCreateFileCheckBoxActionPerformed
        changeSupport.fireChange();
    }//GEN-LAST:event_autoCreateFileCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField adminTextField;
    private javax.swing.JLabel adminsLabel;
    private javax.swing.JCheckBox autoCreateFileCheckBox;
    private javax.swing.JLabel catalogLabel;
    private javax.swing.JTextField catalogTextField;
    private javax.swing.JLabel customPathLabel;
    private javax.swing.JCheckBox enabledCheckBox;
    private javax.swing.JCheckBox ignoreCacheCheckBox;
    private javax.swing.JCheckBox openCartCodeFormatCheckBox;
    private javax.swing.JLabel systemLabel;
    private javax.swing.JTextField systemTextField;
    private javax.swing.JLabel themeLabel;
    private javax.swing.JTextField themesTextField;
    // End of variables declaration//GEN-END:variables

    private class DefaultDocumentListener implements DocumentListener {

        public DefaultDocumentListener() {
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            processUpdate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            processUpdate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            processUpdate();
        }

        private void processUpdate() {
            fireChange();
        }
    }
}
